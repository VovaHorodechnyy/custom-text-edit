#include "mainwindow.h"
#include "ui_mainwindow.h"

#ifdef Q_OS_MAC
const QString rsrcPath = ":/images/mac";
#else
const QString rsrcPath = ":/images/win";
#endif

MainWindow::MainWindow(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::MainWindow)
{
    ui->setupUi(this);
    m_sPathLastFile="new text file.txt";
    this->setWindowTitle("new text file.txt");
//    ui->textEdit->verticalScrollBar()->setSliderPosition(
//    ui->textEdit->verticalScrollBar()->maximum());
//    QScrollBar *v = ui->textEdit->verticalScrollBar();
//    v->setValue(v->maximum());
    //QTextEdit::ensureCursorVisible();
    const QIcon newIcon = QIcon::fromTheme("document-new", QIcon(rsrcPath + "/filenew.png"));

    ui->actionNew->setIcon(newIcon);
}

MainWindow::~MainWindow()
{
    delete ui;
}
QString MainWindow::getSaveFile()
{
    return QFileDialog::getSaveFileName(this,"Save a file",QDir::homePath(),"Text files (*.txt);;XML files (*.xml);;All files (*.*)");
}
void MainWindow::saveFile(const QString &path)
{
    QFile file(path);
     if (!file.open(QIODevice::WriteOnly))
         return ;

    auto data=ui->textEdit->toPlainText().toUtf8();
    file.write(data);
    file.close();
}
QString MainWindow::readFile(const QString&aPath)
{
    m_sPathLastFile=aPath;
    QFile file(aPath); // создаем объект класса QFile
    QByteArray data; // Создаем объект класса QByteArray, куда мы будем считывать данные
    if (!file.open(QIODevice::ReadOnly)) // Проверяем, возможно ли открыть наш файл для чтения
        return ""; // если это сделать невозможно, то завершаем функцию
    data = file.readAll(); //считываем все данные с файла в объект data
    QFileInfo fileInfo(file.fileName());
    this->setWindowTitle(fileInfo.fileName());
    file.close();

    return QString(data);
}

void MainWindow::on_actionNew_triggered()
{
    ui->textEdit->clear();
    m_sPathLastFile = "NoName";
}

void MainWindow::on_actionOpen_triggered()
{
    // QFileDialog dialog(this);
    // QStringList mimeTypeFilters;
 //    mimeTypeFilters << "image/jpeg" // will show "JPEG image (*.jpeg *.jpg *.jpe)
 //                << "image/png"  // will show "PNG image (*.png)"
 //                << "application/octet-stream"; // will show "All files (*)"
 //   dialog.setNameFilter(tr("Text files (*.txt);;XML files (*.xml);;All files (*.*)"));
    // dialog.setMimeTypeFilters(mimeTypeFilters);

    // dialog.exec();
  // QString path =  dialog.getOpenFileName();

   QString path = QFileDialog::getOpenFileName(this,"Open a file",QDir::homePath(),"Text files (*.txt);;XML files (*.xml);;All files (*.*)");
   if(path!="")
   {
       QString data = readFile(path);
       ui->textEdit->setText(data);
   }
}

void MainWindow::on_actionSave_triggered()
{
    if(m_sPathLastFile=="NoName")
    {
        m_sPathLastFile = getSaveFile();
    }
     saveFile(m_sPathLastFile);
}

void MainWindow::on_actionSave_as_triggered()
{
    QString path = getSaveFile();
     if(path!="")
     {
         m_sPathLastFile = path;

         saveFile(m_sPathLastFile);
     }
}

void MainWindow::on_actionUndo_triggered()
{
    ui->textEdit->undo();
}

void MainWindow::on_actionCut_triggered()
{
     ui->textEdit->cut();
}

void MainWindow::on_actionCopy_triggered()
{
    ui->textEdit->copy();
}

void MainWindow::on_actionPaste_triggered()
{
    ui->textEdit->paste();
}

void MainWindow::on_actionfind_triggered()
{
 //ui->textEdit->find();
}

void MainWindow::on_actionRedo_triggered()
{
    ui->textEdit->redo();
}
